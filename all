#include "monty.h"

/**
 *
 */

void (*get_op(char *s, unsigned int n))(stack_t **, unsigned int )
{
	int i;
	char *tmp,	buf[120];

	instruction_t cmd[] = {
		{"push", push},
		{"pall", pall},
		{"pint", pint},
		{NULL, NULL}
	};

	tmp = strtok(s, " ");

	for(i = 0; cmd[i].opcode != NULL && tmp != NULL; i++)
	{
		if (strcmp(tmp, cmd[i].opcode) == 0)
			return (cmd[i].f);
	}
	sprintf(buf, "L%d: unknown instruction %s", n, tmp);
	fprintf(stderr, "%s\n", buf);
	exit(EXIT_FAILURE);
}

int checknum(char *s)
{
	int i;

	if (s == NULL)
	{
		return (0);
	}
	for(i = 0; s[i] != 0; i++)
	{
		if (!(s[i] >= '0' && s[i] <= '9'))
			return (0);
	}
	return (1);
}

void free_stack(stack_t **head)
{
	stack_t *curr;

	curr = *head;
	while (*head != NULL)
	{
		curr = (*head)->next;
		free(*head);
		*head = curr;
	}
}
#include "monty.h"

/**
 *
 */

char **read_file(char *filename)
{
	int i, fd, len, line_c;
	char *tmp, buffer[ULIMIT], **arr;

	/* Section reads the file into a buffer */
	fd = open(filename, O_RDONLY);
	if (fd == -1)
	{
		fprintf(stderr, "Error: Can't open file %s\n", filename);
		exit(EXIT_FAILURE);
	}
	len = read(fd, buffer, ULIMIT - 1);
	buffer[len] = '\0';

	/* Splits buffer into seperate arr */
	for (i = 0, line_c = 1; buffer[i] != '\0'; i++) /* lc = 1, the def \0*/
	{
		if (buffer[i] == '\n')
			line_c++;
	}
	arr = malloc(sizeof(char *) * (line_c + 1)); /* should be freed */
	if (arr == NULL)
	{
		fprintf(stderr, "Error: malloc failed\n");
		exit(EXIT_FAILURE);
	}
	tmp = strtok(buffer, "\n");
	for (i = 0; tmp != NULL; i++)
	{
		trim(&tmp);
		arr[i] = tmp;
		tmp = strtok(NULL, "\n");
	}
	arr[line_c] = NULL;
	close(fd);
	return (arr);
}

/**
 *
 */

void trim(char **s) /* working here */
{
	int i, next;

	for (i = 0, next = i + 1; (*s)[i] == ' '; i++, next++)
	{
		if ((*s)[next] != ' ')
		{
			(*s) = &(*s)[next];
			return;
		}
		else
			continue;
	}
}
#include "monty.h"


char **lines;

/**
 *
 */
int main(int argc, char **argv)
{
	int i;
	stack_t *head;
	void (*operation)(stack_t **, unsigned int);

	if (argc != 2) /* monty file */
	{
		fprintf(stderr, "USAGE: monty file\n");
		exit(EXIT_FAILURE);
	}
	head = NULL;
	i = 0;
	lines = read_file(argv[1]);
	
	while(lines[i] != NULL)
	{
		operation = get_op(lines[i], i + 1);
		operation(&head, i + 1);
		i++;
	}
	free_stack(&head);
	free(lines);
	return (0);
}
#include "monty.h"

void push (stack_t **stack, unsigned int line_number)
{
	int x;
	stack_t *node;
	char *tmp;

	node = malloc(sizeof(stack_t));
	if (node == NULL)
	{
		fprintf(stderr, "Error: malloc failed\n");
		exit(EXIT_FAILURE);
	}

	tmp = strtok(NULL, " ");
	
	x = checknum(tmp);
	if (x == 0)
	{
		fprintf(stderr, "L%d: usage: push integer\n", line_number);
		exit(EXIT_FAILURE);
	}
	node->n = atoi(tmp);
	node->next = (*stack);
	node->prev = NULL;
	if ((*stack) != NULL)
		(*stack)->prev = node;
	(*stack) = node;
}

void pall(stack_t **stack, unsigned int line_number)
{
	stack_t *curr;

	(void) line_number;
	curr = (*stack);

	while(curr != NULL)
	{
		printf("%d\n", curr->n);
		curr = curr->next;
	}
}
void pint(stack_t **stack, unsigned int line_number)
{
	stack_t *curr;

	curr = *stack;
	if (curr == NULL)
	{
		fprintf(stderr, "L%d: can't pint, stack empty\n", line_number);
		exit(EXIT_FAILURE);
	}
	
	printf("%d\n", curr->n);
}
